mod FILE is
    pr NAT .
    pr STRING .

    sort FilePath .
    subsort String < FilePath .
    var P : FilePath .

    sort Region .
    subsort Nat < Region .
    op padding : -> Region [ctor] .
    vars R1 R2 R3 : Region .

    --- We assume that chunks are made up of 3 regions.
    --- We chose 3 only because it's a small number that
    --- still allows us to capture interesting behaviours
    --- of overlapping writes.
    sort Chunk .
    op chunk1 : Region -> Chunk [ctor] .
    op chunk2 : Region Region -> Chunk [ctor] .
    op chunk : Region Region Region -> Chunk [ctor] .

    op chunk-len : Chunk -> Nat .
    eq chunk-len(chunk1(R1)) = 1 .
    eq chunk-len(chunk2(R1, R2)) = 2 .
    eq chunk-len(chunk(R1, R2, R3)) = 3 .

    sort Chunks .
    subsort Chunk < Chunks .
    op empty-chunks : -> Chunks [ctor] .
    op _,c_ : Chunks Chunks -> Chunks [ctor assoc id: empty-chunks] .
    var CS : Chunks .

    sort ChunkId .
    op chunk-id : Chunk -> ChunkId .

    sort ChunkIds .
    subsort ChunkId < ChunkIds .
    op empty-chunk-ids : -> ChunkIds [ctor] .
    op _,ci_ : ChunkIds ChunkIds -> ChunkIds [ctor assoc id: empty-chunk-ids] .

    sort ChunkIdSet .
    subsort ChunkId < ChunkIdSet .
    op empty-chunk-id-set : -> ChunkIdSet [ctor] .
    op _ _ : ChunkIdSet ChunkIdSet -> ChunkIdSet [ctor assoc comm idem id: empty-chunk-id-set] .
    var CHUNKIDSET : ChunkIdSet .
    eq CHUNKIDSET CHUNKIDSET = CHUNKIDSET .

    sort File .
    op file : FilePath Chunks -> File [ctor] .
    op file-path : File -> FilePath .
    eq file-path(file(P, CS)) = P .
    op file-chunks : File -> Chunks .
    eq file-chunks(file(P, CS)) = CS .

    sort FilePaths .
    subsort FilePath < FilePaths .
    op empty-file-paths : -> FilePaths [ctor] .
    op _,p_ : FilePaths FilePaths -> FilePaths [ctor assoc id: empty-file-paths] .
endm
